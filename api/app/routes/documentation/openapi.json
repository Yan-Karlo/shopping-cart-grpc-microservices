{
  "openapi": "3.0.0",
  "info": {
    "title": "Loja Integrada - Shopping-Cart Code Challenge",
    "version": "1.0.0",
    "description": "A shopping-cart API must be create in order to show the candidate style of coding through the basic operations that are regarding a e- commerce shopping cart.  version: 1.0.0",
    "contact": {
      "email": "yan.karlo29@gmail.com",
      "name": "Yan Karlo Teixeira",
      "url": "https://www.linkedin.com/in/yan-karlo/"
    }
  },
  "tags": [
    {
      "name": "Carts",
      "description": "Shopping-cart basic operations"
    },
    {
      "name": "Products",
      "description": "products catalog basic operations"
    }
  ],
  "paths": {
    "/v1/carts/ping": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Returns a POJO indicating that the microservice is running and listening.",
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ping"
                }
              }
            }
          },
          "404": {
            "description": "Microservice is either not working or listening.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/{cartId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Recovers a specific cart´s information.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "ID of cart to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/get-by-user/{userId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Recovers a specific cart´s information through the owner´s Id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user who is the cart´s owner.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/calculate/{cartId}": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Recovers a specific cart´s information having the total and subtotals calculated.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "This the id of cart to be recovered.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartWithSubtotal"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts": {
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Creates a new shopping cart.",
        "requestBody": {
          "description": "A JSON object containing the new cart information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCart"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/clean/{cartId}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Cleans the cart content (products and coupon information).",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The shopping-cart Id to be cleaned.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/add-product/{cartId}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Add a new product to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The shopping-cart Id to add a new product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A JSON object containing the new product id and quantity. information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/qty-update/{cartId}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Add a new product to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The shopping-cart Id to update the quantity of a product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A JSON object containing the new product id and new quantity.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/add-coupon/{cartId}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Add a coupon to the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The shopping-cart Id to add a coupon.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A JSON object containing the new product id and quantity. information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coupon"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/carts/remove-product/{cartId}/{productId}": {
      "put": {
        "tags": [
          "Carts"
        ],
        "summary": "Removes a product from the cart.",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The shopping-cart Id to remove a product from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The product Id to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The cart was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/ping": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns an simple object indicating that the microservice is running and listening.",
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ping"
                }
              }
            }
          },
          "404": {
            "description": "Server not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Recovers all products information.",
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllProductsResponse"
                }
              }
            }
          },
          "404": {
            "description": "Server not available.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Recovers the information about a specific product.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The product Id to be recovered.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "62d85807fc13ae4dc7000036"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedAtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The product was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/update-price/{id}/{price}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates the price of a specific product.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The product Id to update the price.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "62d85807fc13ae4dc7000036"
            }
          },
          {
            "name": "price",
            "in": "path",
            "description": "The new price.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double",
              "example": 15.5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedPriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "404": {
            "description": "The product was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Ping": {
        "type": "object",
        "properties": {
          "ping": {
            "type": "string",
            "example": "pong"
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "string",
            "example": "62d45bd95075d72514bba9a1"
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          }
        }
      },
      "Coupon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "62d45bd95075d72514bba9a1"
          },
          "percentage": {
            "type": "number",
            "format": "double",
            "example": 10
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "62d45bd95075d72514bba9a1"
          },
          "description": {
            "type": "string",
            "example": "glass bottle"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 50.55
          },
          "isSuspended": {
            "type": "boolean",
            "example": "false;"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          }
        }
      },
      "NewCartProduct": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 50.55
          },
          "isSuspended": {
            "type": "boolean",
            "example": "false;"
          }
        }
      },
      "ProductWithSubTotal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "62d45bd95075d72514bba9a1"
          },
          "description": {
            "type": "string",
            "example": "glass bottle"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 5.55
          },
          "subtotal": {
            "type": "number",
            "format": "double",
            "example": 555
          },
          "isSuspended": {
            "type": "boolean",
            "example": "false;"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          }
        }
      },
      "CartWithSubtotal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "string",
            "example": "62d45bd95075d72514bba9a1"
          },
          "productsWithSubtotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductWithSubTotal"
            }
          },
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          },
          "subtotal": {
            "type": "number",
            "format": "double",
            "example": 555
          },
          "discount": {
            "type": "number",
            "format": "double",
            "example": 55.5
          },
          "total": {
            "type": "number",
            "format": "double",
            "example": 499.5
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          },
          "generatedAt": {
            "type": "string",
            "format": "date",
            "example": "Tue Jul 19 2022 20:58:56 GMT-0300 (Brasilia Standard Time)"
          }
        }
      },
      "NewCart": {
        "type": "object",
        "properties": {
          "coupon": {
            "$ref": "#/components/schemas/Coupon"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCartProduct"
            }
          }
        }
      },
      "AddItem": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "example": "62d45bd95075d72514bba9a1"
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 10
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 10.11
          }
        }
      },
      "UpdatedAtResponse": {
        "type": "object",
        "properties": {
          "updateddAt": {
            "type": "string",
            "format": "date",
            "example": "Sun Jul 17 2022 17:18:17 GMT-0300 (Brasilia Standard Time)"
          }
        }
      },
      "CreatedAtResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "UpdatedPriceResponse": {
        "type": "object",
        "properties": {
          "updateddAt": {
            "type": "string",
            "format": "date",
            "example": "Sun Jul 17 2022 17:18:17 GMT-0300 (Brasilia Standard Time)"
          },
          "isOK": {
            "type": "boolean",
            "example": true
          },
          "matchedCount": {
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "modifiedCount": {
            "type": "integer",
            "format": "int32",
            "example": 2
          }
        }
      },
      "GetAllProductsResponse": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "example": 400
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 3,
            "description": "Indicates which gRPC erro status (3 or 6)."
          },
          "message": {
            "type": "string",
            "description": "This message can be either a customized (caught) or node´s one (uncought)."
          },
          "source": {
            "type": "string",
            "description": "Indicates which microservice has thrown the error."
          }
        }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "example": 401
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 16,
            "description": "Indicates which gRPC erro status (16)."
          },
          "message": {
            "type": "string",
            "description": "This message can be either a customized (caught) or node´s one (uncought)."
          },
          "source": {
            "type": "string",
            "description": "Indicates which microservice has thrown the error."
          }
        }
      },
      "Error403": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "example": 403
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 7,
            "description": "Indicates which gRPC erro status (7)."
          },
          "message": {
            "type": "string",
            "description": "This message can be either a customized (caught) or node´s one (uncought)."
          },
          "source": {
            "type": "string",
            "description": "Indicates which microservice has thrown the error."
          }
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "example": 404
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 5,
            "description": "Indicates which gRPC erro status (5 or 12)."
          },
          "message": {
            "type": "string",
            "description": "This message can be either a customized (caught) or node´s one (uncought)."
          },
          "source": {
            "type": "string",
            "description": "Indicates which microservice has thrown the error."
          }
        }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "example": 500
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "example": 13,
            "description": "Indicates which gRPC erro status (1, 2, 10, 13 ou 15)."
          },
          "message": {
            "type": "string",
            "description": "This message can be either a customized (caught) or node´s one (uncought)."
          },
          "source": {
            "type": "string",
            "description": "Indicates which microservice has thrown the error."
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "variables": {}
    }
  ]
}